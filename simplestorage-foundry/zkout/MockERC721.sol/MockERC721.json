{"abi":null,"bytecode":{"object":""},"assembly":"\t.text\n\t.file\t\"MockERC721.sol:MockERC721\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[7]\n\tptr.add\tr1, r0, stack[@ptr_calldata]\n\tadd\t128, r0, r8\n\tst.1\t64, r8\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r12\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_8\n\tsub.s!\t4, r12, r2\n\tjump.lt\t@.BB0_236\n\tld\tr1, r2\n\tshr.s\t224, r2, r2\n\tsub.s!\t@CPI0_2[0], r2, r4\n\tjump.gt\t@.BB0_10\n\tsub.s!\t@CPI0_12[0], r2, r4\n\tjump.le\t@.BB0_31\n\tsub.s!\t@CPI0_13[0], r2, r4\n\tjump.gt\t@.BB0_44\n\tsub.s!\t@CPI0_16[0], r2, r4\n\tjump.eq\t@.BB0_60\n\tsub.s!\t@CPI0_17[0], r2, r1\n\tjump.ne\t@.BB0_236\n\tadd\tr12, r0, r1\n\tnear_call\tr0, @abi_decode_addresst_addresst_uint256, @DEFAULT_UNWIND\n\tnear_call\tr0, @fun_transferFrom, @DEFAULT_UNWIND\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_8:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_236\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_1[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_10:\n\tsub.s!\t@CPI0_3[0], r2, r4\n\tjump.le\t@.BB0_37\n\tsub.s!\t@CPI0_4[0], r2, r4\n\tjump.gt\t@.BB0_53\n\tsub.s!\t@CPI0_7[0], r2, r4\n\tjump.eq\t@.BB0_66\n\tsub.s!\t@CPI0_8[0], r2, r2\n\tjump.ne\t@.BB0_236\n\tsub.s!\t132, r12, r2\n\tjump.lt\t@.BB0_236\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r11\n\tsub.s!\t@CPI0_21[0], r11, r2\n\tjump.gt\t@.BB0_236\n\tptr.add.s\t36, r1, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_21[0], r2, r4\n\tjump.gt\t@.BB0_236\n\tptr.add.s\t68, r1, r4\n\tld\tr4, r3\n\tptr.add.s\t100, r1, r4\n\tld\tr4, r4\n\tsub.s!\t@CPI0_24[0], r4, r5\n\tjump.gt\t@.BB0_236\n\tadd\t35, r4, r5\n\tsub!\tr5, r12, r5\n\tjump.ge\t@.BB0_236\n\tadd\t4, r4, r5\n\tptr.add\tr1, r5, r6\n\tld\tr6, r9\n\tsub.s!\t@CPI0_24[0], r9, r6\n\tjump.gt\t@.BB0_52\n\tadd\t31, r9, r6\n\tsub.s\t32, r0, r10\n\tand\tr6, r10, r6\n\tadd\t63, r6, r6\n\tand\tr6, r10, r6\n\tsub.s!\t@CPI0_25[0], r6, r7\n\tjump.gt\t@.BB0_52\n\tadd\t36, r4, r4\n\tadd\t128, r6, r6\n\tst.1\t64, r6\n\tst.1\t128, r9\n\tadd\tr9, r4, r4\n\tsub!\tr4, r12, r4\n\tjump.gt\t@.BB0_236\n\tadd\t32, r5, r4\n\tptr.add\tr1, r4, r1\n\tand\t31, r9, r12\n\tshr.s!\t5, r9, r4\n\tjump.eq\t@.BB0_25\n\tadd\tr0, r0, r5\n.BB0_24:\n\tshl.s\t5, r5, r6\n\tptr.add\tr1, r6, r7\n\tld\tr7, r7\n\tadd\t160, r6, r6\n\tst.1\tr6, r7\n\tadd\t1, r5, r5\n\tsub!\tr5, r4, r6\n\tjump.lt\t@.BB0_24\n.BB0_25:\n\tadd\tr10, r0, stack-[3]\n\tadd\tr8, r0, stack-[5]\n\tsub!\tr12, r0, r5\n\tjump.eq\t@.BB0_27\n\tshl.s\t5, r4, r4\n\tptr.add\tr1, r4, r1\n\tshl.s\t3, r12, r6\n\tadd\t160, r4, r4\n\tld.1\tr4, r5\n\tshl\tr5, r6, r5\n\tshr\tr5, r6, r5\n\tld\tr1, r1\n\tsub\t256, r6, r6\n\tshr\tr1, r6, r1\n\tshl\tr1, r6, r1\n\tor\tr1, r5, r1\n\tst.1\tr4, r1\n.BB0_27:\n\tadd\t160, r9, r1\n\tst.1\tr1, r0\n\tadd\tr11, r0, stack-[6]\n\tadd\tr11, r0, r1\n\tadd\tr3, r0, stack-[4]\n\tadd\tr2, r0, stack-[7]\n\tnear_call\tr0, @fun_transferFrom, @DEFAULT_UNWIND\n\tadd\t@CPI0_26[0], r0, r1\n\tst.2\t0, r1\n\tadd\tstack-[7], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_27[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_172\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_173\n.BB0_29:\n\tadd\t1, r0, r1\n.BB0_30:\n\tand\t1, r1, r1\n\tnear_call\tr0, @require_helper_stringliteral_91ac, @DEFAULT_UNWIND\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_31:\n\tsub.s!\t@CPI0_18[0], r2, r4\n\tjump.eq\t@.BB0_75\n\tsub.s!\t@CPI0_19[0], r2, r4\n\tjump.eq\t@.BB0_81\n\tsub.s!\t@CPI0_20[0], r2, r2\n\tjump.ne\t@.BB0_236\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r12, r3\n\tjump.lt\t@.BB0_236\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_236\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tst.1\t0, r1\n\tadd\t4, r0, r1\n\tst.1\t32, r1\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tsload\tr1, r1\n\tand\t@CPI0_21[0], r1, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_22[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_37:\n\tsub.s!\t@CPI0_9[0], r2, r4\n\tjump.eq\t@.BB0_84\n\tsub.s!\t@CPI0_10[0], r2, r4\n\tjump.eq\t@.BB0_89\n\tsub.s!\t@CPI0_11[0], r2, r1\n\tjump.ne\t@.BB0_236\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_236\n\tadd\t1, r0, r3\n\tsload\tr3, r2\n\tand!\t1, r2, r5\n\tshr.s\t1, r2, r1\n\tand\t127, r1, r4\n\tadd.eq\tr4, r0, r1\n\tsub.s!\t31, r1, r6\n\tadd\t0, r0, r6\n\tadd.gt\t1, r0, r6\n\txor\tr2, r6, r6\n\tand!\t1, r6, r6\n\tjump.ne\t@.BB0_83\n\tst.1\t128, r1\n\tsub!\tr5, r0, r5\n\tjump.ne\t@.BB0_110\n\tsub.s\t256, r0, r1\n\tand\tr2, r1, r1\n\tst.1\t160, r1\n\tsub!\tr4, r0, r1\n\tadd\t192, r0, r1\n\tadd.eq\t160, r0, r1\n\tjump\t@.BB0_152\n.BB0_44:\n\tsub.s!\t@CPI0_14[0], r2, r4\n\tjump.eq\t@.BB0_94\n\tsub.s!\t@CPI0_15[0], r2, r2\n\tjump.ne\t@.BB0_236\n\tcontext.get_context_u128\tr2\n\tsub.s!\t68, r12, r4\n\tjump.lt\t@.BB0_236\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_236\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r5\n\tsub.s!\t@CPI0_24[0], r5, r2\n\tjump.gt\t@.BB0_236\n\tadd\t35, r5, r2\n\tsub!\tr2, r12, r2\n\tjump.ge\t@.BB0_236\n\tadd\t4, r5, r6\n\tptr.add\tr1, r6, r2\n\tld\tr2, r4\n\tsub.s!\t@CPI0_24[0], r4, r2\n\tjump.gt\t@.BB0_52\n\tadd\t31, r4, r7\n\tsub.s\t32, r0, r2\n\tand\tr7, r2, r7\n\tadd\t63, r7, r7\n\tand\tr7, r2, r7\n\tsub.s!\t@CPI0_25[0], r7, r8\n\tjump.le\t@.BB0_116\n.BB0_52:\n\tadd\t@CPI0_48[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_49[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_53:\n\tsub.s!\t@CPI0_5[0], r2, r4\n\tjump.eq\t@.BB0_101\n\tsub.s!\t@CPI0_6[0], r2, r2\n\tjump.ne\t@.BB0_236\n\tcontext.get_context_u128\tr2\n\tsub.s!\t68, r12, r3\n\tjump.lt\t@.BB0_236\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_236\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_21[0], r2, r3\n\tjump.gt\t@.BB0_236\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r3\n\tsub.s!\t@CPI0_21[0], r3, r1\n\tjump.gt\t@.BB0_236\n\tst.1\t0, r2\n\tadd\t5, r0, r1\n\tst.1\t32, r1\n\tadd\tr0, r0, r1\n\tadd\tr3, r0, stack-[7]\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tadd\tstack-[7], r0, r2\n\tst.1\t0, r2\n\tst.1\t32, r1\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tsload\tr1, r1\n\tand!\t255, r1, r1\n\tadd\t0, r0, r1\n\tadd.ne\t1, r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_22[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_60:\n\tsub.s!\t68, r12, r2\n\tjump.lt\t@.BB0_236\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r2\n\tadd\tr2, r0, stack-[7]\n\tsub.s!\t@CPI0_21[0], r2, r2\n\tjump.gt\t@.BB0_236\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[6]\n\tst.1\t0, r1\n\tadd\t2, r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_31[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_236\n\tld\tr1, r1\n\tsload\tr1, r1\n\tand\t@CPI0_21[0], r1, r2\n\tcontext.caller\tr3\n\tsub!\tr3, r2, r1\n\tadd\tr2, r0, stack-[5]\n\tjump.ne\t@.BB0_142\n.BB0_64:\n\tadd\tstack-[6], r0, r1\n\tst.1\t0, r1\n\tadd\t4, r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_31[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_236\n\tld\tr1, r1\n\tsload\tr1, r2\n\tand\t@CPI0_44[0], r2, r2\n\tadd\tstack-[7], r0, r6\n\tor\tr2, r6, r2\n\tsstore\tr1, r2\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_45[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t4, r0, r3\n\tadd\t@CPI0_52[0], r0, r4\n\tadd\tstack-[5], r0, r5\n\tadd\tstack-[6], r0, r7\n\tjump\t@.BB0_73\n.BB0_66:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t68, r12, r3\n\tjump.lt\t@.BB0_236\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_236\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r3\n\tsub.s!\t@CPI0_21[0], r3, r2\n\tjump.gt\t@.BB0_236\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r2\n\tsub!\tr2, r0, r1\n\tadd\t0, r0, r1\n\tadd.ne\t1, r0, r1\n\tadd\tr2, r0, stack-[6]\n\tsub!\tr2, r1, r1\n\tjump.ne\t@.BB0_236\n\tcontext.caller\tr1\n\tadd\tr1, r0, stack-[5]\n\tst.1\t0, r1\n\tadd\t5, r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r4\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr4, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_31[0], r1, r1\n\tadd\t32784, r0, r2\n\tadd\tr3, r0, stack-[7]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[7], r0, r3\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_236\n\tld\tr1, r1\n\tst.1\t0, r3\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_31[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[7], r0, r6\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_236\n\tld\tr1, r1\n\tsload\tr1, r2\n\tsub.s\t256, r0, r3\n\tand\tr2, r3, r2\n\tadd\tstack-[6], r0, r3\n\tor\tr2, r3, r2\n\tsstore\tr1, r2\n\tld.1\t64, r1\n\tst.1\tr1, r3\n\tadd\t@CPI0_0[0], r0, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r3, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_32[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t3, r0, r3\n\tadd\t@CPI0_33[0], r0, r4\n\tadd\tstack-[5], r0, r5\n.BB0_73:\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB0_236\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_75:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r12, r3\n\tjump.lt\t@.BB0_236\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_236\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r2\n\tand!\t@CPI0_29[0], r2, r1\n\tjump.ne\t@.BB0_236\n\tadd\t1, r0, r1\n\tsub.s!\t@CPI0_53[0], r2, r3\n\tjump.eq\t@.BB0_114\n\tsub.s!\t@CPI0_54[0], r2, r3\n\tjump.eq\t@.BB0_114\n\tsub.s!\t@CPI0_55[0], r2, r2\n\tadd.ne\tr0, r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_22[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_81:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_236\n\tsload\tr0, r2\n\tand!\t1, r2, r3\n\tshr.s\t1, r2, r4\n\tand\t127, r4, r1\n\tadd.ne\tr4, r0, r1\n\tsub.s!\t31, r1, r4\n\tadd\t0, r0, r4\n\tadd.gt\t1, r0, r4\n\tsub!\tr3, r4, r4\n\tjump.eq\t@.BB0_107\n.BB0_83:\n\tadd\t@CPI0_48[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_49[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_84:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r12, r3\n\tjump.lt\t@.BB0_236\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_236\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tst.1\t0, r1\n\tadd\t2, r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_31[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_236\n\tld.1\t64, r2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd\t@CPI0_0[0], r0, r3\n\tadd.lt\tr2, r0, r3\n\tshl.s\t64, r3, r3\n\tld\tr1, r1\n\tsload\tr1, r1\n\tand!\t@CPI0_21[0], r1, r1\n\tjump.ne\t@.BB0_112\n\tadd\t68, r2, r1\n\tadd\t@CPI0_39[0], r0, r4\n\tst.1\tr1, r4\n\tadd\t36, r2, r1\n\tadd\t10, r0, r4\n\tst.1\tr1, r4\n\tadd\t@CPI0_35[0], r0, r1\n\tst.1\tr2, r1\n\tadd\t4, r2, r1\n\tadd\t32, r0, r2\n\tst.1\tr1, r2\n\tor\t@CPI0_40[0], r3, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_89:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r12, r3\n\tjump.lt\t@.BB0_236\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_236\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsub.s!\t@CPI0_21[0], r1, r2\n\tjump.gt\t@.BB0_236\n\tsub!\tr1, r0, r2\n\tjump.ne\t@.BB0_113\n\tadd\t@CPI0_35[0], r0, r1\n\tst.1\t128, r1\n\tadd\t32, r0, r1\n\tst.1\t132, r1\n\tadd\t12, r0, r1\n\tst.1\t164, r1\n\tadd\t@CPI0_36[0], r0, r1\n\tst.1\t196, r1\n\tadd\t@CPI0_37[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_94:\n\tsub.s!\t100, r12, r2\n\tjump.lt\t@.BB0_236\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r4\n\tsub.s!\t@CPI0_21[0], r4, r2\n\tjump.gt\t@.BB0_236\n\tptr.add.s\t36, r1, r2\n\tld\tr2, r2\n\tadd\tr2, r0, stack-[7]\n\tsub.s!\t@CPI0_21[0], r2, r2\n\tjump.gt\t@.BB0_236\n\tptr.add.s\t68, r1, r1\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[4]\n\tst.1\t0, r1\n\tadd\t2, r0, r1\n\tadd\tr1, r0, stack-[3]\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_31[0], r1, r1\n\tadd\t32784, r0, r2\n\tadd\tr8, r0, stack-[5]\n\tadd\tr4, r0, stack-[6]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[6], r0, r3\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_236\n\tld\tr1, r1\n\tsload\tr1, r1\n\tand\t@CPI0_21[0], r1, r1\n\tsub!\tr3, r1, r1\n\tjump.ne\t@.BB0_153\n\tsub!\tstack-[7], r0, r1\n\tjump.ne\t@.BB0_155\n\tld.1\t64, r1\n\tadd\t68, r1, r2\n\tadd\t@CPI0_50[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t17, r0, r3\n\tjump\t@.BB0_154\n.BB0_101:\n\tcontext.get_context_u128\tr1\n\tsub.s!\t36, r12, r2\n\tjump.lt\t@.BB0_236\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_236\n\tadd\t32, r0, r1\n\tst.1\t128, r1\n\tld.1\t96, r1\n\tst.1\t160, r1\n\tsub!\tr1, r0, r2\n\tjump.eq\t@.BB0_106\n\tadd\tr0, r0, r2\n.BB0_105:\n\tadd\t128, r2, r3\n\tld.1\tr3, r3\n\tadd\t192, r2, r4\n\tst.1\tr4, r3\n\tadd\t32, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.lt\t@.BB0_105\n.BB0_106:\n\tadd\t192, r1, r2\n\tst.1\tr2, r0\n\tadd\t31, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r1\n\tadd\t64, r1, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t96, r1, r1\n\tor\t@CPI0_23[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_107:\n\tst.1\t128, r1\n\tsub!\tr3, r0, r3\n\tjump.eq\t@.BB0_115\n\tst.1\t0, r0\n\tsub!\tr1, r0, r2\n\tjump.eq\t@.BB0_109\n\tadd\t@CPI0_42[0], r0, r2\n\tadd\tr0, r0, r4\n.BB0_147:\n\tadd\tr4, r0, r3\n\tsload\tr2, r4\n\tadd\t160, r3, r5\n\tst.1\tr5, r4\n\tadd\t1, r2, r2\n\tadd\t32, r3, r4\n\tsub!\tr4, r1, r5\n\tjump.lt\t@.BB0_147\n\tjump\t@.BB0_151\n.BB0_110:\n\tst.1\t0, r3\n\tsub.s!\t2, r2, r2\n\tjump.ge\t@.BB0_149\n.BB0_109:\n\tadd\t160, r0, r1\n\tjump\t@.BB0_152\n.BB0_112:\n\tst.1\tr2, r1\n\tor\t@CPI0_38[0], r3, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_113:\n\tst.1\t0, r1\n\tadd\t3, r0, r1\n\tst.1\t32, r1\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tsload\tr1, r1\n.BB0_114:\n\tst.1\t128, r1\n\tadd\t@CPI0_22[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_115:\n\tsub.s\t256, r0, r3\n\tand\tr2, r3, r2\n\tst.1\t160, r2\n\tsub!\tr1, r0, r1\n\tadd\t192, r0, r1\n\tadd.eq\t160, r0, r1\n\tjump\t@.BB0_152\n.BB0_116:\n\tadd\t36, r5, r5\n\tadd\t128, r7, r7\n\tst.1\t64, r7\n\tst.1\t128, r4\n\tadd\tr4, r5, r5\n\tsub!\tr5, r12, r5\n\tjump.gt\t@.BB0_236\n\tadd\t32, r6, r5\n\tptr.add\tr1, r5, r5\n\tand\t31, r4, r6\n\tshr.s!\t5, r4, r7\n\tjump.eq\t@.BB0_120\n\tadd\tr0, r0, r8\n.BB0_119:\n\tshl.s\t5, r8, r9\n\tptr.add\tr5, r9, r10\n\tld\tr10, r10\n\tadd\t160, r9, r9\n\tst.1\tr9, r10\n\tadd\t1, r8, r8\n\tsub!\tr8, r7, r9\n\tjump.lt\t@.BB0_119\n.BB0_120:\n\tsub!\tr6, r0, r8\n\tjump.eq\t@.BB0_122\n\tshl.s\t5, r7, r7\n\tptr.add\tr5, r7, r5\n\tshl.s\t3, r6, r6\n\tadd\t160, r7, r7\n\tld.1\tr7, r8\n\tshl\tr8, r6, r8\n\tshr\tr8, r6, r8\n\tld\tr5, r5\n\tsub\t256, r6, r6\n\tshr\tr5, r6, r5\n\tshl\tr5, r6, r5\n\tor\tr5, r8, r5\n\tst.1\tr7, r5\n.BB0_122:\n\tadd\t160, r4, r4\n\tst.1\tr4, r0\n\tptr.add.s\t36, r1, r4\n\tld\tr4, r5\n\tsub.s!\t@CPI0_24[0], r5, r4\n\tjump.gt\t@.BB0_236\n\tadd\t35, r5, r4\n\tsub!\tr4, r12, r4\n\tjump.ge\t@.BB0_236\n\tadd\t4, r5, r7\n\tptr.add\tr1, r7, r4\n\tld\tr4, r6\n\tsub.s!\t@CPI0_24[0], r6, r4\n\tjump.gt\t@.BB0_52\n\tadd\t31, r6, r4\n\tand\tr4, r2, r4\n\tadd\t63, r4, r4\n\tand\tr4, r2, r8\n\tld.1\t64, r4\n\tadd\tr4, r8, r8\n\tsub!\tr8, r4, r9\n\tadd\t0, r0, r9\n\tadd.lt\t1, r0, r9\n\tsub.s!\t@CPI0_24[0], r8, r10\n\tjump.gt\t@.BB0_52\n\tand!\t1, r9, r9\n\tjump.ne\t@.BB0_52\n\tadd\t36, r5, r9\n\tst.1\t64, r8\n\tst.1.inc\tr4, r6, r5\n\tadd\tr6, r9, r8\n\tsub!\tr8, r12, r3\n\tjump.gt\t@.BB0_236\n\tadd\t32, r7, r3\n\tptr.add\tr1, r3, r3\n\tand\t31, r6, r1\n\tshr.s!\t5, r6, r7\n\tjump.eq\t@.BB0_131\n\tadd\tr0, r0, r8\n.BB0_130:\n\tshl.s\t5, r8, r9\n\tadd\tr5, r9, r10\n\tptr.add\tr3, r9, r9\n\tld\tr9, r9\n\tst.1\tr10, r9\n\tadd\t1, r8, r8\n\tsub!\tr8, r7, r9\n\tjump.lt\t@.BB0_130\n.BB0_131:\n\tsub!\tr1, r0, r8\n\tjump.eq\t@.BB0_133\n\tshl.s\t5, r7, r7\n\tptr.add\tr3, r7, r3\n\tadd\tr5, r7, r7\n\tshl.s\t3, r1, r1\n\tld.1\tr7, r8\n\tshl\tr8, r1, r8\n\tshr\tr8, r1, r8\n\tld\tr3, r3\n\tsub\t256, r1, r1\n\tshr\tr3, r1, r3\n\tshl\tr3, r1, r1\n\tor\tr1, r8, r1\n\tst.1\tr7, r1\n.BB0_133:\n\tadd\tr5, r6, r1\n\tst.1\tr1, r0\n\tadd\t6, r0, r1\n\tsload\tr1, r3\n\tand!\t255, r3, r3\n\tjump.ne\t@.BB0_178\n\tld.1\t128, r3\n\tsub.s!\t@CPI0_24[0], r3, r6\n\tjump.gt\t@.BB0_52\n\tsload\tr0, r7\n\tand!\t1, r7, r6\n\tshr.s\t1, r7, r8\n\tand\t127, r8, r6\n\tadd.ne\tr8, r0, r6\n\tsub.s!\t31, r6, r8\n\tadd\t0, r0, r8\n\tadd.gt\t1, r0, r8\n\txor\tr7, r8, r7\n\tand!\t1, r7, r7\n\tjump.ne\t@.BB0_83\n\tsub.s!\t32, r6, r7\n\tjump.lt\t@.BB0_139\n\tadd\t31, r3, r7\n\tshr.s\t5, r7, r7\n\tadd\t@CPI0_42[0], r7, r8\n\tadd\t@CPI0_42[0], r0, r7\n\tsub.s!\t32, r3, r9\n\tadd.ge\tr8, r0, r7\n\tst.1\t0, r0\n\tadd\t31, r6, r6\n\tshr.s\t5, r6, r6\n\tadd\t@CPI0_42[0], r6, r6\n\tsub!\tr7, r6, r8\n\tjump.ge\t@.BB0_139\n.BB0_138:\n\tsstore\tr7, r0\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_138\n.BB0_139:\n\tsub.s!\t31, r3, r6\n\tjump.le\t@.BB0_198\n\tand!\tr3, r2, r7\n\tst.1\t0, r0\n\tjump.ne\t@.BB0_201\n\tadd\t160, r0, r8\n\tadd\t@CPI0_42[0], r0, r6\n\tjump\t@.BB0_204\n.BB0_142:\n\tadd\tr3, r0, stack-[4]\n\tst.1\t0, r2\n\tadd\t5, r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_31[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_236\n\tld\tr1, r1\n\tadd\tstack-[4], r0, r2\n\tst.1\t0, r2\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_31[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_236\n\tld\tr1, r1\n\tsload\tr1, r1\n\tand!\t255, r1, r1\n\tjump.ne\t@.BB0_64\n.BB0_145:\n\tld.1\t64, r1\n\tadd\t68, r1, r2\n\tadd\t@CPI0_51[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t14, r0, r3\n\tjump\t@.BB0_154\n.BB0_149:\n\tadd\t@CPI0_34[0], r0, r2\n\tadd\tr0, r0, r4\n.BB0_150:\n\tadd\tr4, r0, r3\n\tsload\tr2, r4\n\tadd\t160, r3, r5\n\tst.1\tr5, r4\n\tadd\t1, r2, r2\n\tadd\t32, r3, r4\n\tsub!\tr4, r1, r5\n\tjump.lt\t@.BB0_150\n.BB0_151:\n\tadd\t192, r3, r1\n.BB0_152:\n\tsub.s\t128, r1, r2\n\tadd\t128, r0, r1\n\tadd\tr1, r0, stack-[7]\n\tnear_call\tr0, @finalize_allocation, @DEFAULT_UNWIND\n\tadd\t32, r0, r1\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[6]\n\tst.1.inc\tr2, r1, r2\n\tadd\tstack-[7], r0, r1\n\tnear_call\tr0, @abi_encode_string, @DEFAULT_UNWIND\n\tadd\tstack-[6], r0, r4\n\tsub\tr1, r4, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.ge\tr2, r0, r4\n\tshl.s\t64, r4, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_153:\n\tld.1\t64, r1\n\tadd\t68, r1, r2\n\tadd\t@CPI0_43[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t10, r0, r3\n.BB0_154:\n\tst.1\tr2, r3\n\tadd\t@CPI0_35[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tadd\t32, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_40[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_155:\n\tcontext.caller\tr1\n\tadd\tr1, r0, stack-[2]\n\tsub!\tr1, r3, r1\n\tjump.ne\t@.BB0_159\n.BB0_156:\n\tst.1\t0, r3\n\tadd\t3, r0, r1\n\tadd\tr1, r0, stack-[1]\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_31[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_236\n\tld\tr1, r1\n\tsload\tr1, r2\n\tsub!\tr2, r0, r3\n\tjump.ne\t@.BB0_164\n.BB0_158:\n\tadd\t@CPI0_48[0], r0, r1\n\tst.1\t0, r1\n\tadd\t17, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_49[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_159:\n\tst.1\t0, r3\n\tadd\t5, r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_31[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_236\n\tld\tr1, r1\n\tadd\tstack-[2], r0, r2\n\tst.1\t0, r2\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_31[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[6], r0, r3\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_236\n\tld\tr1, r1\n\tsload\tr1, r1\n\tand!\t255, r1, r1\n\tjump.ne\t@.BB0_156\n\tadd\tstack-[4], r0, r1\n\tst.1\t0, r1\n\tadd\t4, r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_31[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[6], r0, r3\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_236\n\tld\tr1, r1\n\tsload\tr1, r1\n\tand\t@CPI0_21[0], r1, r1\n\tsub!\tstack-[2], r1, r1\n\tjump.ne\t@.BB0_145\n\tjump\t@.BB0_156\n.BB0_164:\n\tsub.s\t1, r2, r2\n\tsstore\tr1, r2\n\tadd\tstack-[7], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[1], r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_31[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_236\n\tld\tr1, r1\n\tsload\tr1, r2\n\tsub.s\t1, r0, r3\n\tsub!\tr2, r3, r3\n\tjump.eq\t@.BB0_158\n\tadd\t1, r2, r2\n\tsstore\tr1, r2\n\tadd\tstack-[4], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[3], r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_31[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_236\n\tld\tr1, r1\n\tsload\tr1, r2\n\tand\t@CPI0_44[0], r2, r2\n\tor\tstack-[7], r2, r2\n\tsstore\tr1, r2\n\tadd\t4, r0, r1\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_31[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_236\n\tld\tr1, r1\n\tsload\tr1, r2\n\tand\t@CPI0_44[0], r2, r2\n\tsstore\tr1, r2\n\tadd\t@CPI0_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_45[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t4, r0, r3\n\tadd\t@CPI0_46[0], r0, r4\n\tadd\tstack-[6], r0, r5\n\tadd\tstack-[7], r0, r6\n\tadd\tstack-[4], r0, r7\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB0_236\n\tadd\t@CPI0_26[0], r0, r1\n\tst.2\t0, r1\n\tadd\tstack-[7], r0, r1\n\tst.2\t4, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_27[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_172\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_218\n\tjump\t@.BB0_29\n.BB0_172:\n\trevert\n.BB0_173:\n\tld.1\t64, r3\n\tadd\t100, r3, r1\n\tadd\tstack-[5], r0, r2\n\tst.1\tr1, r2\n\tadd\t68, r3, r1\n\tadd\tstack-[4], r0, r2\n\tst.1\tr1, r2\n\tadd\t36, r3, r1\n\tadd\tstack-[6], r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI0_28[0], r0, r1\n\tst.1\tr3, r1\n\tadd\t4, r3, r1\n\tcontext.caller\tr2\n\tst.1\tr1, r2\n\tadd\t132, r3, r2\n\tld.1\t128, r1\n\tst.1\tr2, r1\n\tadd\tr3, r0, stack-[2]\n\tadd\t164, r3, r2\n\tsub!\tr1, r0, r3\n\tjump.eq\t@.BB0_176\n\tadd\tr0, r0, r3\n.BB0_175:\n\tadd\tr3, r2, r4\n\tadd\t160, r3, r5\n\tld.1\tr5, r5\n\tst.1\tr4, r5\n\tadd\t32, r3, r3\n\tsub!\tr3, r1, r4\n\tjump.lt\t@.BB0_175\n.BB0_176:\n\tadd\tr1, r2, r2\n\tst.1\tr2, r0\n\tcontext.gas_left\tr3\n\tadd\tstack-[7], r0, r2\n\tand\t@CPI0_21[0], r2, r2\n\tsub.s!\t4, r2, r4\n\tjump.ne\t@.BB0_179\n\tadd\tstack[@returndatasize], r0, r3\n\tsub.s!\t32, r3, r1\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tjump\t@.BB0_185\n.BB0_178:\n\tld.1\t64, r1\n\tadd\t68, r1, r2\n\tadd\t@CPI0_41[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t19, r0, r3\n\tjump\t@.BB0_154\n.BB0_179:\n\tadd\t31, r1, r1\n\tand\tstack-[3], r1, r1\n\tadd\t@CPI0_0[0], r0, r4\n\tadd\tstack-[2], r0, r6\n\tsub.s!\t@CPI0_0[0], r6, r5\n\tadd\tr4, r0, r5\n\tadd.lt\tr6, r0, r5\n\tshl.s\t64, r5, r5\n\tadd\t164, r1, r1\n\tsub.s!\t@CPI0_0[0], r1, r6\n\tadd.ge\tr4, r0, r1\n\tshl.s\t96, r1, r1\n\tor\tr1, r5, r1\n\tsub.s!\t@CPI0_0[0], r3, r5\n\tadd.ge\tr4, r0, r3\n\tshl.s\t192, r3, r3\n\tor\tr3, r1, r1\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[2], r0, r10\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_182\n\tadd\tr0, r0, r7\n.BB0_181:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_181\n.BB0_182:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_184\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tstack-[2], r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_184:\n\tadd\tr3, r0, stack[@returndatasize]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_191\n.BB0_185:\n\tadd\t31, r4, r1\n\tand\t96, r1, r2\n\tadd\tstack-[2], r2, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_24[0], r1, r4\n\tjump.gt\t@.BB0_52\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_52\n\tst.1\t64, r1\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_236\n\tadd\tstack-[2], r0, r1\n\tld.1\tr1, r1\n\tand!\t@CPI0_29[0], r1, r2\n\tjump.ne\t@.BB0_236\n.BB0_190:\n\tand\t@CPI0_30[0], r1, r1\n\tsub.s!\t@CPI0_28[0], r1, r1\n\tadd\t0, r0, r1\n\tadd.eq\t1, r0, r1\n\tjump\t@.BB0_30\n.BB0_191:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_194\n\tadd\tr0, r0, r6\n.BB0_193:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_193\n.BB0_194:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_197\n.BB0_196:\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr2, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB0_197:\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tshl.s\t96, r3, r2\n\tor\tr1, r2, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_198:\n\tsub!\tr3, r0, r6\n\tadd\tr0, r0, r6\n\tjump.eq\t@.BB0_200\n\tld.1\t160, r6\n.BB0_200:\n\tshl.s\t3, r3, r7\n\tsub.s\t1, r0, r8\n\tshr\tr8, r7, r7\n\txor\tr7, r8, r7\n\tand\tr6, r7, r6\n\tshl.s\t1, r3, r3\n\tor\tr6, r3, r3\n\tjump\t@.BB0_207\n.BB0_201:\n\tadd\t@CPI0_42[0], r0, r6\n\tadd\t32, r0, r9\n\tadd\tr0, r0, r8\n.BB0_202:\n\tadd\tr9, r0, r10\n\tadd\t128, r10, r9\n\tld.1\tr9, r9\n\tsstore\tr6, r9\n\tadd\t32, r10, r9\n\tadd\t1, r6, r6\n\tadd\t32, r8, r8\n\tsub!\tr8, r7, r11\n\tjump.lt\t@.BB0_202\n\tadd\t160, r10, r8\n.BB0_204:\n\tsub!\tr7, r3, r7\n\tjump.ge\t@.BB0_206\n\tshl.s\t3, r3, r7\n\tand\t248, r7, r7\n\tsub.s\t1, r0, r9\n\tshr\tr9, r7, r7\n\txor\tr7, r9, r7\n\tld.1\tr8, r8\n\tand\tr8, r7, r7\n\tsstore\tr6, r7\n.BB0_206:\n\tshl.s\t1, r3, r3\n\tor\t1, r3, r3\n.BB0_207:\n\tsstore\tr0, r3\n\tld.1\tr4, r6\n\tsub.s!\t@CPI0_24[0], r6, r3\n\tjump.gt\t@.BB0_52\n\tadd\t1, r0, r3\n\tsload\tr3, r8\n\tand!\t1, r8, r7\n\tshr.s\t1, r8, r9\n\tand\t127, r9, r7\n\tadd.ne\tr9, r0, r7\n\tsub.s!\t31, r7, r9\n\tadd\t0, r0, r9\n\tadd.gt\t1, r0, r9\n\txor\tr8, r9, r8\n\tand!\t1, r8, r8\n\tjump.ne\t@.BB0_83\n\tsub.s!\t32, r7, r8\n\tjump.lt\t@.BB0_212\n\tadd\t31, r6, r8\n\tshr.s\t5, r8, r8\n\tadd\t@CPI0_34[0], r8, r9\n\tadd\t@CPI0_34[0], r0, r8\n\tsub.s!\t32, r6, r10\n\tadd.ge\tr9, r0, r8\n\tadd\t1, r0, r9\n\tst.1\t0, r9\n\tadd\t31, r7, r7\n\tshr.s\t5, r7, r7\n\tadd\t@CPI0_34[0], r7, r7\n\tsub!\tr8, r7, r9\n\tjump.ge\t@.BB0_212\n.BB0_211:\n\tsstore\tr8, r0\n\tadd\t1, r8, r8\n\tsub!\tr8, r7, r9\n\tjump.lt\t@.BB0_211\n.BB0_212:\n\tsub.s!\t31, r6, r7\n\tjump.le\t@.BB0_215\n\tst.1\t0, r3\n\tand!\tr6, r2, r7\n\tjump.ne\t@.BB0_220\n\tadd\t32, r0, r5\n\tadd\t@CPI0_34[0], r0, r2\n\tjump\t@.BB0_222\n.BB0_215:\n\tsub!\tr6, r0, r2\n\tadd\tr0, r0, r2\n\tjump.eq\t@.BB0_217\n\tld.1\tr5, r2\n.BB0_217:\n\tshl.s\t3, r6, r4\n\tsub.s\t1, r0, r5\n\tshr\tr5, r4, r4\n\txor\tr4, r5, r4\n\tand\tr2, r4, r2\n\tshl.s\t1, r6, r4\n\tjump\t@.BB0_225\n.BB0_218:\n\tld.1\t64, r3\n\tadd\t100, r3, r1\n\tadd\tstack-[5], r0, r2\n\tst.1\tr1, r2\n\tadd\t68, r3, r1\n\tadd\tstack-[4], r0, r2\n\tst.1\tr1, r2\n\tadd\t36, r3, r1\n\tadd\tstack-[6], r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI0_28[0], r0, r1\n\tst.1\tr3, r1\n\tadd\t4, r3, r1\n\tadd\tstack-[2], r0, r2\n\tst.1\tr1, r2\n\tadd\tr3, r0, stack-[3]\n\tadd\t132, r3, r1\n\tst.1\tr1, r0\n\tcontext.gas_left\tr1\n\tadd\tstack-[7], r0, r2\n\tsub.s!\t4, r2, r2\n\tjump.ne\t@.BB0_226\n\tadd\tstack[@returndatasize], r0, r3\n\tsub.s!\t32, r3, r1\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tjump\t@.BB0_232\n.BB0_220:\n\tadd\t@CPI0_34[0], r0, r2\n\tadd\t32, r0, r5\n\tadd\tr0, r0, r8\n.BB0_221:\n\tadd\tr5, r4, r9\n\tld.1\tr9, r9\n\tsstore\tr2, r9\n\tadd\t32, r5, r5\n\tadd\t1, r2, r2\n\tadd\t32, r8, r8\n\tsub!\tr8, r7, r9\n\tjump.lt\t@.BB0_221\n.BB0_222:\n\tsub!\tr7, r6, r7\n\tjump.ge\t@.BB0_224\n\tshl.s\t3, r6, r7\n\tand\t248, r7, r7\n\tsub.s\t1, r0, r8\n\tshr\tr8, r7, r7\n\txor\tr7, r8, r7\n\tadd\tr5, r4, r4\n\tld.1\tr4, r4\n\tand\tr4, r7, r4\n\tsstore\tr2, r4\n.BB0_224:\n\tshl.s\t1, r6, r2\n\tadd\tr3, r0, r4\n.BB0_225:\n\tor\tr2, r4, r2\n\tsstore\tr3, r2\n\tsload\tr1, r2\n\tsub.s\t256, r0, r3\n\tand\tr2, r3, r2\n\tor\t1, r2, r2\n\tsstore\tr1, r2\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_226:\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tadd\tstack-[3], r0, r4\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.lt\tr4, r0, r2\n\tshl.s\t64, r2, r2\n\tshl.s\t192, r1, r1\n\tor\tr1, r2, r1\n\tor\t@CPI0_47[0], r1, r1\n\tadd\tstack-[7], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[3], r0, r10\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_229\n\tadd\tr0, r0, r7\n.BB0_228:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_228\n.BB0_229:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_231\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tstack-[3], r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_231:\n\tadd\tr3, r0, stack[@returndatasize]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_237\n.BB0_232:\n\tadd\t31, r4, r1\n\tand\t96, r1, r2\n\tadd\tstack-[3], r2, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_24[0], r1, r4\n\tjump.gt\t@.BB0_52\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_52\n\tst.1\t64, r1\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_236\n\tadd\tstack-[3], r0, r1\n\tld.1\tr1, r1\n\tand!\t@CPI0_29[0], r1, r2\n\tjump.eq\t@.BB0_190\n.BB0_236:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_237:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_240\n\tadd\tr0, r0, r6\n.BB0_239:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_239\n.BB0_240:\n\tsub!\tr4, r0, r6\n\tjump.ne\t@.BB0_196\n\tjump\t@.BB0_197\n.func_end0:\n\nabi_encode_string:\n.func_begin1:\n\tld.1.inc\tr1, r3, r4\n\tst.1.inc\tr2, r3, r1\n\tsub!\tr3, r0, r2\n\tjump.eq\t@.BB1_3\n\tadd\tr0, r0, r2\n.BB1_2:\n\tadd\tr1, r2, r5\n\tadd\tr4, r2, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tadd\t32, r2, r2\n\tsub!\tr2, r3, r5\n\tjump.lt\t@.BB1_2\n.BB1_3:\n\tadd\tr1, r3, r2\n\tst.1\tr2, r0\n\tadd\t31, r3, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\tr1, r2, r1\n\tret\n.func_end1:\n\nabi_decode_addresst_addresst_uint256:\n.func_begin2:\n\tadd\t@CPI2_0[0], r0, r2\n\tsub.s!\t99, r1, r3\n\tadd\tr0, r0, r3\n\tadd.gt\tr2, r0, r3\n\tand\t@CPI2_0[0], r1, r1\n\tsub!\tr1, r0, r4\n\tadd.ge\tr0, r0, r2\n\tsub.s!\t@CPI2_0[0], r1, r1\n\tadd.ne\tr3, r0, r2\n\tsub!\tr2, r0, r1\n\tjump.eq\t@.BB2_1\n\tptr.add\tstack[@ptr_calldata], r0, r3\n\tptr.add.s\t4, r3, r1\n\tld\tr1, r1\n\tsub.s!\t@CPI2_1[0], r1, r2\n\tjump.gt\t@.BB2_1\n\tptr.add.s\t36, r3, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI2_1[0], r2, r4\n\tjump.gt\t@.BB2_1\n\tptr.add.s\t68, r3, r3\n\tld\tr3, r3\n\tret\n.BB2_1:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end2:\n\nfinalize_allocation:\n.func_begin3:\n\tadd\t31, r2, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\tr2, r1, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI3_0[0], r1, r3\n\tjump.gt\t@.BB3_2\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB3_2\n\tst.1\t64, r1\n\tret\n.BB3_2:\n\tadd\t@CPI3_1[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI3_2[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end3:\n\nfun_transferFrom:\n.func_begin4:\n\tnop\tstack+=[5]\n\tadd\tr2, r0, stack-[3]\n\tadd\tr1, r0, stack-[5]\n\tadd\tr3, r0, stack-[4]\n\tst.1\t0, r3\n\tadd\t2, r0, r1\n\tadd\tr1, r0, stack-[2]\n\tst.1\t32, r1\n\tadd\t@CPI4_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI4_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI4_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB4_1\n\tld\tr1, r1\n\tsload\tr1, r1\n\tand\t@CPI4_2[0], r1, r2\n\tadd\tstack-[5], r0, r1\n\tand\t@CPI4_2[0], r1, r1\n\tsub!\tr1, r2, r1\n\tjump.ne\t@.BB4_3\n\tadd\tstack-[3], r0, r1\n\tand!\t@CPI4_2[0], r1, stack-[5]\n\tjump.eq\t@.BB4_6\n\tcontext.caller\tr1\n\tadd\tr1, r0, stack-[1]\n\tsub!\tr1, r2, r1\n\tadd\tr2, r0, stack-[3]\n\tjump.eq\t@.BB4_14\n\tst.1\t0, r2\n\tadd\t5, r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI4_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI4_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI4_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB4_1\n\tld\tr1, r1\n\tadd\tstack-[1], r0, r2\n\tst.1\t0, r2\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI4_0[0], r1, r2\n\tadd.ge\t@CPI4_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI4_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB4_1\n\tld\tr1, r1\n\tsload\tr1, r1\n\tand!\t255, r1, r1\n\tadd\tstack-[3], r0, r2\n\tjump.ne\t@.BB4_14\n\tadd\tstack-[4], r0, r1\n\tst.1\t0, r1\n\tadd\t4, r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI4_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI4_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI4_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB4_1\n\tld\tr1, r1\n\tsload\tr1, r1\n\tand\t@CPI4_2[0], r1, r1\n\tsub!\tstack-[1], r1, r1\n\tadd\tstack-[3], r0, r2\n\tjump.ne\t@.BB4_13\n.BB4_14:\n\tst.1\t0, r2\n\tadd\t3, r0, r1\n\tadd\tr1, r0, stack-[1]\n\tst.1\t32, r1\n\tadd\t@CPI4_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI4_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI4_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB4_1\n\tld\tr1, r1\n\tsload\tr1, r2\n\tsub!\tr2, r0, r3\n\tjump.eq\t@.BB4_16\n\tsub.s\t1, r2, r2\n\tsstore\tr1, r2\n\tadd\tstack-[5], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[1], r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI4_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI4_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI4_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB4_1\n\tld\tr1, r1\n\tsload\tr1, r2\n\tsub.s\t1, r0, r3\n\tsub!\tr2, r3, r3\n\tjump.eq\t@.BB4_16\n\tadd\t1, r2, r2\n\tsstore\tr1, r2\n\tadd\tstack-[4], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[2], r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI4_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI4_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI4_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB4_1\n\tld\tr1, r1\n\tsload\tr1, r2\n\tand\t@CPI4_7[0], r2, r2\n\tor\tstack-[5], r2, r2\n\tsstore\tr1, r2\n\tadd\t4, r0, r1\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI4_0[0], r1, r2\n\tadd.ge\t@CPI4_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI4_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB4_1\n\tld\tr1, r1\n\tsload\tr1, r2\n\tand\t@CPI4_7[0], r2, r2\n\tsstore\tr1, r2\n\tadd\t@CPI4_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI4_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI4_8[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t4, r0, r3\n\tadd\t@CPI4_9[0], r0, r4\n\tadd\tstack-[3], r0, r5\n\tadd\tstack-[5], r0, r6\n\tadd\tstack-[4], r0, r7\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB4_1\n\tret\n.BB4_1:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB4_16:\n\tadd\t@CPI4_10[0], r0, r1\n\tst.1\t0, r1\n\tadd\t17, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI4_11[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB4_3:\n\tld.1\t64, r1\n\tadd\t68, r1, r2\n\tadd\t@CPI4_3[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t10, r0, r3\n\tjump\t@.BB4_4\n.BB4_6:\n\tld.1\t64, r1\n\tadd\t68, r1, r2\n\tadd\t@CPI4_12[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t17, r0, r3\n.BB4_4:\n\tst.1\tr2, r3\n\tadd\t@CPI4_4[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tadd\t32, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI4_0[0], r0, r2\n\tsub.s!\t@CPI4_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI4_5[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB4_13:\n\tld.1\t64, r1\n\tadd\t68, r1, r2\n\tadd\t@CPI4_6[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t14, r0, r3\n\tjump\t@.BB4_4\n.func_end4:\n\nrequire_helper_stringliteral_91ac:\n.func_begin5:\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB5_1\n\tret\n.BB5_1:\n\tld.1\t64, r1\n\tadd\t68, r1, r2\n\tadd\t@CPI5_0[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t16, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI5_1[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tadd\t32, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI5_2[0], r0, r2\n\tsub.s!\t@CPI5_2[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI5_3[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end5:\n\n__cxa_throw:\n.func_begin6:\n\trevert\n.func_end6:\n\n__sha3:\n.func_begin7:\n\tadd\t@CPI7_0[0], r0, r2\n\tsub.s!\t@CPI7_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI7_0[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tshl.s\t192, r3, r2\n\tshl.s\t64, r1, r1\n\tor\tr1, r2, r1\n\tor\t@CPI7_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB7_2\n\tld\tr1, r1\n\tret\n.BB7_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end7:\n\n__farcall:\n.func_begin8:\n.tmp0:\n\tfar_call\tr1, r2, @.BB8_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB8_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end8:\n\n__staticcall:\n.func_begin9:\n.tmp3:\n\tfar_call.static\tr1, r2, @.BB9_2\n.tmp4:\n\tadd\t1, r0, r2\n\tret\n.BB9_2:\n.tmp5:\n\tadd\tr0, r0, r2\n\tret\n.func_end9:\n\n\t.data\n\t.p2align\t5, 0x0\nreturndatasize:\n\t.cell 0\n\n\t.p2align\t5, 0x0\nptr_calldata:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI4_0:\nCPI5_2:\nCPI7_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_2:\n\t.cell 1666326813\nCPI0_3:\n\t.cell 2720838756\nCPI0_4:\n\t.cell 3363526364\nCPI0_5:\n\t.cell 3363526365\nCPI0_6:\n\t.cell 3917867461\nCPI0_7:\n\t.cell 2720838757\nCPI0_8:\n\t.cell 3096268766\nCPI0_9:\n\t.cell 1666326814\nCPI0_10:\n\t.cell 1889567281\nCPI0_11:\n\t.cell 2514000705\nCPI0_12:\n\t.cell 157198258\nCPI0_13:\n\t.cell 1115958797\nCPI0_14:\n\t.cell 1115958798\nCPI0_15:\n\t.cell 1289259894\nCPI0_16:\n\t.cell 157198259\nCPI0_17:\n\t.cell 599290589\nCPI0_18:\n\t.cell 33540519\nCPI0_19:\n\t.cell 117300739\nCPI0_20:\n\t.cell 135795452\nCPI0_21:\nCPI2_1:\nCPI4_2:\n\t.cell 1461501637330902918203684832716283019655932542975\nCPI0_22:\n\t.cell 2535301202817642044428229017600\nCPI0_23:\n\t.cell 2361183241434822606848\nCPI0_24:\nCPI3_0:\n\t.cell 18446744073709551615\nCPI0_25:\n\t.cell 18446744073709551487\nCPI0_26:\n\t.cell 10867283408178898638301172343726954674910073630256871736220740970449699113859\nCPI0_27:\n\t.cell 904625751086426111047927909714404454142933105326819602152923490636624035840\nCPI0_28:\n\t.cell 9518847204935358166548570266051330015907116135037852959641967396525866745856\nCPI0_29:\n\t.cell 26959946667150639794667015087019630673637144422540572481103610249215\nCPI0_30:\n\t.cell -26959946667150639794667015087019630673637144422540572481103610249216\nCPI0_31:\nCPI4_1:\nCPI7_1:\n\t.cell 904625697166532776746648320380374280103671760270919307471179981048634146816\nCPI0_32:\n\t.cell 904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI0_33:\n\t.cell 10488878412788366941768124514102328501031624832915735463117339209566108871729\nCPI0_34:\n\t.cell -35707666377435648211887908874984608119992236509074197713628505308453184860938\nCPI0_35:\nCPI4_4:\nCPI5_1:\n\t.cell 3963877391197344453575983046348115674221700746820753546331534351508065746944\nCPI0_36:\n\t.cell 40830636903031423861688139537390718479674427448325055209562639556715193827328\nCPI0_37:\n\t.cell 7922816253787617000789217640448\nCPI0_38:\n\t.cell 2535301200456458802993406410752\nCPI0_39:\n\t.cell 35420565423639537228617691553148466105545936757585078819855793298259008552960\nCPI0_40:\nCPI4_5:\nCPI5_3:\n\t.cell 7922816251426433759354395033600\nCPI0_41:\n\t.cell 29535183345145645464477851197593903596241110250713156662292127721300527415296\nCPI0_42:\n\t.cell 18569430475105882587588266137607568536673111973893317399460219858819262702947\nCPI0_43:\nCPI4_3:\n\t.cell 39496646634409606239827972489872868837952845752995518704443643484015993815040\nCPI0_44:\nCPI4_7:\n\t.cell -1461501637330902918203684832716283019655932542976\nCPI0_45:\nCPI4_8:\n\t.cell 904625697166532776746648320380374280103671755200316906558262375061821325312\nCPI0_46:\nCPI4_9:\n\t.cell -15402802100530019096323380498944738953123845089667699673314898783681816316945\nCPI0_47:\n\t.cell 12993418652339351365341207855104\nCPI0_48:\nCPI3_1:\nCPI4_10:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_49:\nCPI3_2:\nCPI4_11:\n\t.cell 2852213850513516153367582212096\nCPI0_50:\nCPI4_12:\n\t.cell 33157247328247392177347867825146339663983762987302272919419008699839968968704\nCPI0_51:\nCPI4_6:\n\t.cell 35420565422380735808816581324811381250276386706089210115323610567592544043008\nCPI0_52:\n\t.cell -52305948261162578668367882225327028569797882979485679342215860919519743330011\nCPI0_53:\n\t.cell 904250603428552709895185118199468575982109441609966099573332780532423983104\nCPI0_54:\n\t.cell 41326688264978518566617017154793646184809722027297161851759941631668658372608\nCPI0_55:\n\t.cell -57591534043048631271602713168962198724648561309353517944097662808962438791168\nCPI2_0:\n\t.cell -57896044618658097711785492504343953926634992332820282019728792003956564819968\nCPI5_0:\n\t.cell 38584980805374072516973655170256187011857510180269267528927996738978845818880\n","methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","initialize(string,string)":"4cd88b76","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"},"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"jump_table_density_threshold":null,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.580a8fe5\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Forked from: https://github.com/transmissions11/solmate/blob/0384dbaaa4fcb5715738a9254a7c0a4cb62cf458/src/tokens/ERC721.sol\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"This emits when the approved address for an NFT is changed or reaffirmed. The zero address indicates there is no approved address. When a Transfer event emits, this also indicates that the approved address for that NFT (if any) is reset to none.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"This emits when an operator is enabled or disabled for an owner. The operator can manage all NFTs of the owner.\"},\"Transfer(address,address,uint256)\":{\"details\":\"This emits when ownership of any NFT changes by any mechanism. This event emits when NFTs are created (`from` == 0) and destroyed (`to` == 0). Exception: during contract creation, any number of NFTs may be created and assigned without emitting Transfer. At the time of any transfer, the approved address for that NFT (if any) is reset to none.\"}},\"kind\":\"dev\",\"methods\":{\"initialize(string,string)\":{\"details\":\"To hide constructor warnings across solc versions due to different constructor visibility requirements and syntaxes, we add an initialization function that can be called only once.\"}},\"stateVariables\":{\"initialized\":{\"details\":\"A bool to track whether the contract has been initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"name()\":{\"notice\":\"A descriptive name for a collection of NFTs in this contract\"},\"symbol()\":{\"notice\":\"An abbreviated name for NFTs in this contract\"}},\"notice\":\"This is a mock contract of the ERC721 standard for testing purposes only, it SHOULD NOT be used in production.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/forge-std/src/mocks/MockERC721.sol\":\"MockERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"lib/forge-std/src/interfaces/IERC165.sol\":{\"keccak256\":\"0x414b2861b1acbf816ccb7346d3f16cf6c1e002e9e5e40d2f1f26fa5ddc2ea600\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://698352fb240868ea8f1d1fe389993035eeab930f10d06934f80ccfb2b6ccbfbc\",\"dweb:/ipfs/QmT6WLHAgXxFhh12kWym895oTzXid1326iZiwT3pyfggoT\"]},\"lib/forge-std/src/interfaces/IERC721.sol\":{\"keccak256\":\"0xf069262a264fdb69f8f37a10d2df7374649e9ba73f8414c9c8a3b51184625f15\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://924a41ca82a68ffbd503a5faf2f76d13e9938f10501a71094716f12bb64b4b7f\",\"dweb:/ipfs/QmdWnqfKc5ZGhmxNPTde4zrFchnv9Yk9MpCMb2rdhXE5gm\"]},\"lib/forge-std/src/mocks/MockERC721.sol\":{\"keccak256\":\"0x3293dcbb7acd28df553c954e4e39e288bf10aab7ecda8d50ef21b4f4a91a28d9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9eb374daf6df34f4392f8926f1fddbce9f22c423066aeaefdfbe77395f77967b\",\"dweb:/ipfs/QmWR81zBJRX2uyRjveGzikYPj6ZwKppWsU49YEQXTLWUsN\"]}},\"version\":1}","solc_version":"0.8.19","solc_zkvm_edition":"1.0.1","zk_version":"1.4.1"},"storageLayout":{"storage":[],"types":{}},"userdoc":{},"devdoc":{},"irOptimized":"/// @use-src 12:\"lib/forge-std/src/interfaces/IERC165.sol\", 14:\"lib/forge-std/src/interfaces/IERC721.sol\", 17:\"lib/forge-std/src/mocks/MockERC721.sol\"\nobject \"MockERC721_30100\" {\n    code {\n        {\n            /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"MockERC721_30100_deployed\")\n            codecopy(_1, dataoffset(\"MockERC721_30100_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 17:\"lib/forge-std/src/mocks/MockERC721.sol\"\n    object \"MockERC721_30100_deployed\" {\n        code {\n            {\n                /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                let _1 := memoryguard(0x80)\n                let _2 := 64\n                mstore(_2, _1)\n                let _3 := 4\n                if iszero(lt(calldatasize(), _3))\n                {\n                    let _4 := 0\n                    switch shr(224, calldataload(_4))\n                    case 0x01ffc9a7 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                        let value := calldataload(_3)\n                        let _5 := and(value, shl(224, 0xffffffff))\n                        if iszero(eq(value, _5)) { revert(_4, _4) }\n                        /// @src 17:5462:5562  \"interfaceId == 0x01ffc9a7 // ERC165 Interface ID for ERC165...\"\n                        let expr := /** @src 17:5462:5487  \"interfaceId == 0x01ffc9a7\" */ eq(_5, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ shl(224, 0x01ffc9a7))\n                        /// @src 17:5462:5562  \"interfaceId == 0x01ffc9a7 // ERC165 Interface ID for ERC165...\"\n                        if iszero(expr)\n                        {\n                            expr := /** @src 17:5537:5562  \"interfaceId == 0x80ac58cd\" */ eq(_5, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ shl(224, 0x80ac58cd))\n                        }\n                        /// @src 17:5462:5637  \"interfaceId == 0x01ffc9a7 // ERC165 Interface ID for ERC165...\"\n                        let expr_1 := expr\n                        if iszero(expr)\n                        {\n                            expr_1 := /** @src 17:5612:5637  \"interfaceId == 0x5b5e139f\" */ eq(_5, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ shl(224, 0x5b5e139f))\n                        }\n                        mstore(_1, iszero(iszero(expr_1)))\n                        return(_1, 32)\n                    }\n                    case 0x06fdde03 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let memPtr := mload(_2)\n                        let ret := _4\n                        let slotValue := sload(_4)\n                        let length := extract_byte_array_length(slotValue)\n                        mstore(memPtr, length)\n                        let _6 := 0x20\n                        let _7 := 1\n                        switch and(slotValue, _7)\n                        case 0 {\n                            mstore(add(memPtr, _6), and(slotValue, not(255)))\n                            ret := add(add(memPtr, shl(5, iszero(iszero(length)))), _6)\n                        }\n                        case 1 {\n                            mstore(_4, _4)\n                            let dataPos := 18569430475105882587588266137607568536673111973893317399460219858819262702947\n                            let i := _4\n                            for { } lt(i, length) { i := add(i, _6) }\n                            {\n                                mstore(add(add(memPtr, i), _6), sload(dataPos))\n                                dataPos := add(dataPos, _7)\n                            }\n                            ret := add(add(memPtr, i), _6)\n                        }\n                        finalize_allocation(memPtr, sub(ret, memPtr))\n                        let memPos := mload(_2)\n                        mstore(memPos, _6)\n                        return(memPos, sub(abi_encode_string(memPtr, add(memPos, _6)), memPos))\n                    }\n                    case 0x081812fc {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                        mstore(_4, calldataload(_3))\n                        mstore(32, _3)\n                        let cleaned := and(sload(keccak256(_4, _2)), sub(shl(160, 1), 1))\n                        let memPos_1 := mload(_2)\n                        mstore(memPos_1, cleaned)\n                        return(memPos_1, 32)\n                    }\n                    case 0x095ea7b3 {\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                        let value0 := abi_decode_address()\n                        let value_1 := calldataload(36)\n                        mstore(_4, value_1)\n                        mstore(32, /** @src 17:3210:3218  \"_ownerOf\" */ 0x02)\n                        /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                        let _8 := sub(shl(160, 1), 1)\n                        let cleaned_1 := and(sload(keccak256(_4, _2)), _8)\n                        /// @src 17:3241:3300  \"msg.sender == owner || _isApprovedForAll[owner][msg.sender]\"\n                        let expr_2 := /** @src 17:3241:3260  \"msg.sender == owner\" */ eq(/** @src 17:3241:3251  \"msg.sender\" */ caller(), /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ cleaned_1)\n                        /// @src 17:3241:3300  \"msg.sender == owner || _isApprovedForAll[owner][msg.sender]\"\n                        if iszero(expr_2)\n                        {\n                            /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                            mstore(_4, cleaned_1)\n                            mstore(32, /** @src 17:3264:3281  \"_isApprovedForAll\" */ 0x05)\n                            /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                            let _9 := keccak256(_4, _2)\n                            mstore(_4, /** @src 17:3241:3251  \"msg.sender\" */ caller())\n                            /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                            mstore(32, _9)\n                            /// @src 17:3241:3300  \"msg.sender == owner || _isApprovedForAll[owner][msg.sender]\"\n                            expr_2 := /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ and(sload(keccak256(_4, _2)), 0xff)\n                        }\n                        /// @src 17:3233:3319  \"require(msg.sender == owner || _isApprovedForAll[owner][msg.sender], \\\"NOT_AUTHORIZED\\\")\"\n                        require_helper_stringliteral_e7e2(expr_2)\n                        /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                        mstore(_4, value_1)\n                        mstore(32, _3)\n                        let _10 := keccak256(_4, _2)\n                        let _11 := and(value0, _8)\n                        sstore(_10, or(and(sload(_10), shl(160, 0xffffffffffffffffffffffff)), _11))\n                        /// @src 17:3372:3400  \"Approval(owner, spender, id)\"\n                        log4(/** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ _4, _4, /** @src 17:3372:3400  \"Approval(owner, spender, id)\" */ 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, cleaned_1, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ _11, /** @src 17:3372:3400  \"Approval(owner, spender, id)\" */ value_1)\n                        /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                        return(_4, _4)\n                    }\n                    case 0x23b872dd {\n                        let param, param_1, param_2 := abi_decode_addresst_addresst_uint256(calldatasize())\n                        fun_transferFrom(param, param_1, param_2)\n                        return(_4, _4)\n                    }\n                    case 0x42842e0e {\n                        let param_3, param_4, param_5 := abi_decode_addresst_addresst_uint256(calldatasize())\n                        /// @src 17:4460:4462  \"id\"\n                        fun_transferFrom(param_3, param_4, param_5)\n                        /// @src 17:4495:4668  \"!_isContract(to)...\"\n                        let expr_3 := /** @src 17:7856:7870  \"codeLength > 0\" */ iszero(/** @src 17:7774:7839  \"assembly {...\" */ extcodesize(param_4))\n                        /// @src 17:4495:4668  \"!_isContract(to)...\"\n                        if /** @src 17:7856:7870  \"codeLength > 0\" */ iszero(expr_3)\n                        /// @src 17:4495:4668  \"!_isContract(to)...\"\n                        {\n                            /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                            let _12 := sub(shl(160, 1), 1)\n                            /// @src 17:4531:4598  \"IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \\\"\\\")\"\n                            let _13 := /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ mload(_2)\n                            let _14 := shl(225, 0x0a85bd01)\n                            /// @src 17:4531:4598  \"IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \\\"\\\")\"\n                            mstore(_13, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ _14)\n                            mstore(/** @src 17:4531:4598  \"IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \\\"\\\")\" */ add(_13, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ _3), /** @src 17:4573:4583  \"msg.sender\" */ caller())\n                            /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                            mstore(add(/** @src 17:4531:4598  \"IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \\\"\\\")\" */ _13, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ 36), and(param_3, _12))\n                            mstore(add(/** @src 17:4531:4598  \"IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \\\"\\\")\" */ _13, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ 68), param_5)\n                            mstore(add(/** @src 17:4531:4598  \"IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \\\"\\\")\" */ _13, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ 100), 128)\n                            mstore(add(/** @src 17:4531:4598  \"IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \\\"\\\")\" */ _13, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ 132), _4)\n                            /// @src 17:4531:4598  \"IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \\\"\\\")\"\n                            let _15 := call(gas(), /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ and(/** @src 17:4531:4555  \"IERC721TokenReceiver(to)\" */ param_4, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ _12), _4, /** @src 17:4531:4598  \"IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \\\"\\\")\" */ _13, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ 164, /** @src 17:4531:4598  \"IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \\\"\\\")\" */ _13, 32)\n                            if iszero(_15)\n                            {\n                                /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                                let pos := mload(_2)\n                                returndatacopy(pos, _4, returndatasize())\n                                revert(pos, returndatasize())\n                            }\n                            /// @src 17:4531:4598  \"IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \\\"\\\")\"\n                            let expr_4 := /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ _4\n                            /// @src 17:4531:4598  \"IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \\\"\\\")\"\n                            if _15\n                            {\n                                let _16 := 32\n                                if gt(_16, returndatasize()) { _16 := returndatasize() }\n                                finalize_allocation(_13, _16)\n                                expr_4 := abi_decode_bytes4_fromMemory(_13, add(_13, _16))\n                            }\n                            /// @src 17:4495:4668  \"!_isContract(to)...\"\n                            expr_3 := /** @src 17:4531:4668  \"IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \\\"\\\")...\" */ eq(/** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ and(/** @src 17:4531:4668  \"IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \\\"\\\")...\" */ expr_4, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ shl(224, 0xffffffff)), _14)\n                        }\n                        /// @src 17:4474:4710  \"require(...\"\n                        require_helper_stringliteral_91ac(expr_3)\n                        /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                        return(_4, _4)\n                    }\n                    case 0x4cd88b76 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                        let offset := calldataload(_3)\n                        let _17 := 0xffffffffffffffff\n                        if gt(offset, _17) { revert(_4, _4) }\n                        let value0_1 := abi_decode_string(add(_3, offset), calldatasize())\n                        let offset_1 := calldataload(36)\n                        if gt(offset_1, _17) { revert(_4, _4) }\n                        let value1 := abi_decode_string(add(_3, offset_1), calldatasize())\n                        if iszero(/** @src 17:2795:2807  \"!initialized\" */ iszero(/** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ and(sload(/** @src 17:2796:2807  \"initialized\" */ 0x06), /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ 0xff)))\n                        {\n                            let memPtr_1 := mload(_2)\n                            mstore(memPtr_1, shl(229, 4594637))\n                            mstore(add(memPtr_1, _3), 32)\n                            mstore(add(memPtr_1, 36), 19)\n                            mstore(add(memPtr_1, 68), \"ALREADY_INITIALIZED\")\n                            revert(memPtr_1, 100)\n                        }\n                        let newLen := mload(value0_1)\n                        if gt(newLen, _17)\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, 36)\n                        }\n                        let _18 := extract_byte_array_length(sload(_4))\n                        let _19 := 31\n                        if gt(_18, _19)\n                        {\n                            mstore(_4, _4)\n                            let _20 := 18569430475105882587588266137607568536673111973893317399460219858819262702947\n                            let deleteStart := add(_20, shr(5, add(newLen, _19)))\n                            if lt(newLen, 32) { deleteStart := _20 }\n                            let _21 := add(_20, shr(5, add(_18, _19)))\n                            let start := deleteStart\n                            for { } lt(start, _21) { start := add(start, 1) }\n                            { sstore(start, _4) }\n                        }\n                        let srcOffset := _4\n                        srcOffset := 32\n                        switch gt(newLen, _19)\n                        case 1 {\n                            let loopEnd := and(newLen, not(31))\n                            mstore(_4, _4)\n                            let dstPtr := 18569430475105882587588266137607568536673111973893317399460219858819262702947\n                            let i_1 := _4\n                            for { } lt(i_1, loopEnd) { i_1 := add(i_1, 32) }\n                            {\n                                sstore(dstPtr, mload(add(value0_1, srcOffset)))\n                                dstPtr := add(dstPtr, 1)\n                                srcOffset := add(srcOffset, 32)\n                            }\n                            if lt(loopEnd, newLen)\n                            {\n                                let lastValue := mload(add(value0_1, srcOffset))\n                                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                            }\n                            sstore(_4, add(shl(1, newLen), 1))\n                        }\n                        default {\n                            let value_2 := _4\n                            if newLen\n                            {\n                                value_2 := mload(add(value0_1, srcOffset))\n                            }\n                            sstore(_4, or(and(value_2, not(shr(shl(3, newLen), not(0)))), shl(1, newLen)))\n                        }\n                        let newLen_1 := mload(value1)\n                        if gt(newLen_1, _17)\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, 36)\n                        }\n                        /// @src 17:2865:2882  \"_symbol = symbol_\"\n                        let _22 := 0x01\n                        /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                        let _23 := extract_byte_array_length(sload(/** @src 17:2865:2882  \"_symbol = symbol_\" */ _22))\n                        /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                        if gt(_23, _19)\n                        {\n                            mstore(_4, /** @src 17:2865:2882  \"_symbol = symbol_\" */ _22)\n                            /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                            let _24 := 80084422859880547211683076133703299733277748156566366325829078699459944778998\n                            let deleteStart_1 := add(_24, shr(5, add(newLen_1, _19)))\n                            if lt(newLen_1, 32) { deleteStart_1 := _24 }\n                            let _25 := add(_24, shr(5, add(_23, _19)))\n                            let start_1 := deleteStart_1\n                            for { }\n                            lt(start_1, _25)\n                            {\n                                start_1 := add(start_1, /** @src 17:2865:2882  \"_symbol = symbol_\" */ _22)\n                            }\n                            /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                            { sstore(start_1, _4) }\n                        }\n                        let srcOffset_1 := _4\n                        srcOffset_1 := 32\n                        switch gt(newLen_1, _19)\n                        case 1 {\n                            let loopEnd_1 := and(newLen_1, not(31))\n                            mstore(_4, /** @src 17:2865:2882  \"_symbol = symbol_\" */ _22)\n                            /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                            let dstPtr_1 := 80084422859880547211683076133703299733277748156566366325829078699459944778998\n                            let i_2 := _4\n                            for { } lt(i_2, loopEnd_1) { i_2 := add(i_2, 32) }\n                            {\n                                sstore(dstPtr_1, mload(add(value1, srcOffset_1)))\n                                dstPtr_1 := add(dstPtr_1, /** @src 17:2865:2882  \"_symbol = symbol_\" */ _22)\n                                /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                                srcOffset_1 := add(srcOffset_1, 32)\n                            }\n                            if lt(loopEnd_1, newLen_1)\n                            {\n                                let lastValue_1 := mload(add(value1, srcOffset_1))\n                                sstore(dstPtr_1, and(lastValue_1, not(shr(and(shl(3, newLen_1), 248), not(0)))))\n                            }\n                            sstore(/** @src 17:2865:2882  \"_symbol = symbol_\" */ _22, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ add(shl(/** @src 17:2865:2882  \"_symbol = symbol_\" */ _22, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ newLen_1), /** @src 17:2865:2882  \"_symbol = symbol_\" */ _22))\n                        }\n                        default /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                        {\n                            let value_3 := _4\n                            if newLen_1\n                            {\n                                value_3 := mload(add(value1, srcOffset_1))\n                            }\n                            sstore(/** @src 17:2865:2882  \"_symbol = symbol_\" */ _22, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ or(and(value_3, not(shr(shl(3, newLen_1), not(0)))), shl(/** @src 17:2865:2882  \"_symbol = symbol_\" */ _22, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ newLen_1)))\n                        }\n                        sstore(/** @src 17:2796:2807  \"initialized\" */ 0x06, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ or(and(sload(/** @src 17:2796:2807  \"initialized\" */ 0x06), /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ not(255)), /** @src 17:2865:2882  \"_symbol = symbol_\" */ _22))\n                        /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                        return(_4, _4)\n                    }\n                    case 0x6352211e {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                        mstore(_4, calldataload(_3))\n                        mstore(32, /** @src 17:1367:1375  \"_ownerOf\" */ 0x02)\n                        /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                        let cleaned_2 := and(sload(keccak256(_4, _2)), sub(shl(160, 1), 1))\n                        if /** @src 17:1358:1394  \"(owner = _ownerOf[id]) != address(0)\" */ iszero(/** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ cleaned_2)\n                        {\n                            let memPtr_2 := mload(_2)\n                            mstore(memPtr_2, shl(229, 4594637))\n                            mstore(add(memPtr_2, _3), 32)\n                            mstore(add(memPtr_2, 36), 10)\n                            mstore(add(memPtr_2, 68), \"NOT_MINTED\")\n                            revert(memPtr_2, 100)\n                        }\n                        let memPos_2 := mload(_2)\n                        mstore(memPos_2, cleaned_2)\n                        return(memPos_2, 32)\n                    }\n                    case 0x70a08231 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                        let _26 := and(abi_decode_address(), sub(shl(160, 1), 1))\n                        if /** @src 17:1521:1540  \"owner != address(0)\" */ iszero(/** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ _26)\n                        {\n                            let memPtr_3 := mload(_2)\n                            mstore(memPtr_3, shl(229, 4594637))\n                            mstore(add(memPtr_3, _3), 32)\n                            mstore(add(memPtr_3, 36), 12)\n                            mstore(add(memPtr_3, 68), \"ZERO_ADDRESS\")\n                            revert(memPtr_3, 100)\n                        }\n                        mstore(_4, _26)\n                        mstore(32, /** @src 17:1575:1585  \"_balanceOf\" */ 0x03)\n                        /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                        let _27 := sload(keccak256(_4, _2))\n                        let memPos_3 := mload(_2)\n                        mstore(memPos_3, _27)\n                        return(memPos_3, 32)\n                    }\n                    case 0x95d89b41 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let memPtr_4 := mload(_2)\n                        let ret_1 := _4\n                        /// @src 17:851:858  \"_symbol\"\n                        let _28 := 0x01\n                        /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                        let slotValue_1 := sload(/** @src 17:851:858  \"_symbol\" */ _28)\n                        /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                        let length_1 := extract_byte_array_length(slotValue_1)\n                        mstore(memPtr_4, length_1)\n                        let _29 := 0x20\n                        switch and(slotValue_1, /** @src 17:851:858  \"_symbol\" */ _28)\n                        case /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ 0 {\n                            mstore(add(memPtr_4, _29), and(slotValue_1, not(255)))\n                            ret_1 := add(add(memPtr_4, shl(5, iszero(iszero(length_1)))), _29)\n                        }\n                        case 1 {\n                            mstore(_4, /** @src 17:851:858  \"_symbol\" */ _28)\n                            /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                            let dataPos_1 := 80084422859880547211683076133703299733277748156566366325829078699459944778998\n                            let i_3 := _4\n                            for { } lt(i_3, length_1) { i_3 := add(i_3, _29) }\n                            {\n                                mstore(add(add(memPtr_4, i_3), _29), sload(dataPos_1))\n                                dataPos_1 := add(dataPos_1, /** @src 17:851:858  \"_symbol\" */ _28)\n                            }\n                            /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                            ret_1 := add(add(memPtr_4, i_3), _29)\n                        }\n                        finalize_allocation(memPtr_4, sub(ret_1, memPtr_4))\n                        let memPos_4 := mload(_2)\n                        mstore(memPos_4, _29)\n                        return(memPos_4, sub(abi_encode_string(memPtr_4, add(memPos_4, _29)), memPos_4))\n                    }\n                    case 0xa22cb465 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                        let value0_2 := abi_decode_address()\n                        let value_4 := calldataload(36)\n                        let _30 := iszero(iszero(value_4))\n                        if iszero(eq(value_4, _30)) { revert(_4, _4) }\n                        mstore(_4, /** @src 17:3525:3535  \"msg.sender\" */ caller())\n                        /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                        mstore(32, /** @src 17:3507:3524  \"_isApprovedForAll\" */ 0x05)\n                        /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                        let _31 := keccak256(_4, _2)\n                        let _32 := and(value0_2, sub(shl(160, 1), 1))\n                        mstore(_4, _32)\n                        mstore(32, _31)\n                        let dataSlot := keccak256(_4, _2)\n                        let value_5 := and(sload(dataSlot), not(255))\n                        sstore(dataSlot, or(value_5, and(_30, 255)))\n                        /// @src 17:3573:3619  \"ApprovalForAll(msg.sender, operator, approved)\"\n                        let _33 := /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ mload(_2)\n                        mstore(_33, _30)\n                        /// @src 17:3573:3619  \"ApprovalForAll(msg.sender, operator, approved)\"\n                        log3(_33, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ 32, /** @src 17:3573:3619  \"ApprovalForAll(msg.sender, operator, approved)\" */ 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31, /** @src 17:3525:3535  \"msg.sender\" */ caller(), /** @src 17:3573:3619  \"ApprovalForAll(msg.sender, operator, approved)\" */ _32)\n                        /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                        return(_4, _4)\n                    }\n                    case 0xb88d4fde {\n                        if slt(add(calldatasize(), not(3)), 128) { revert(_4, _4) }\n                        let value0_3 := abi_decode_address()\n                        let value1_1 := abi_decode_address_8431()\n                        let value_6 := calldataload(68)\n                        let offset_2 := calldataload(100)\n                        if gt(offset_2, 0xffffffffffffffff) { revert(_4, _4) }\n                        if iszero(slt(add(offset_2, 35), calldatasize())) { revert(_4, _4) }\n                        let array := abi_decode_available_length_string(add(offset_2, 36), calldataload(add(_3, offset_2)), calldatasize())\n                        /// @src 17:4907:4909  \"id\"\n                        fun_transferFrom(value0_3, value1_1, value_6)\n                        /// @src 17:4942:5117  \"!_isContract(to)...\"\n                        let expr_5 := /** @src 17:7856:7870  \"codeLength > 0\" */ iszero(/** @src 17:7774:7839  \"assembly {...\" */ extcodesize(value1_1))\n                        /// @src 17:4942:5117  \"!_isContract(to)...\"\n                        if /** @src 17:7856:7870  \"codeLength > 0\" */ iszero(expr_5)\n                        /// @src 17:4942:5117  \"!_isContract(to)...\"\n                        {\n                            /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                            let _34 := sub(shl(160, 1), 1)\n                            /// @src 17:4978:5047  \"IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data)\"\n                            let _35 := /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ mload(_2)\n                            let _36 := shl(225, 0x0a85bd01)\n                            /// @src 17:4978:5047  \"IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data)\"\n                            mstore(_35, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ _36)\n                            mstore(/** @src 17:4978:5047  \"IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data)\" */ add(_35, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ _3), /** @src 17:5020:5030  \"msg.sender\" */ caller())\n                            /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                            mstore(add(/** @src 17:4978:5047  \"IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data)\" */ _35, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ 36), and(value0_3, _34))\n                            mstore(add(/** @src 17:4978:5047  \"IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data)\" */ _35, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ 68), value_6)\n                            mstore(add(/** @src 17:4978:5047  \"IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data)\" */ _35, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ 100), 128)\n                            /// @src 17:4978:5047  \"IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data)\"\n                            let _37 := call(gas(), /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ and(/** @src 17:4978:5002  \"IERC721TokenReceiver(to)\" */ value1_1, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ _34), _4, /** @src 17:4978:5047  \"IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data)\" */ _35, sub(/** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ abi_encode_string(array, add(/** @src 17:4978:5047  \"IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data)\" */ _35, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ 132)), /** @src 17:4978:5047  \"IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data)\" */ _35), _35, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ 32)\n                            /// @src 17:4978:5047  \"IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data)\"\n                            if iszero(_37)\n                            {\n                                /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                                let pos_1 := mload(_2)\n                                returndatacopy(pos_1, _4, returndatasize())\n                                revert(pos_1, returndatasize())\n                            }\n                            /// @src 17:4978:5047  \"IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data)\"\n                            let expr_6 := /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ _4\n                            /// @src 17:4978:5047  \"IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data)\"\n                            if _37\n                            {\n                                let _38 := /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ 32\n                                /// @src 17:4978:5047  \"IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data)\"\n                                if gt(/** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ _38, /** @src 17:4978:5047  \"IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data)\" */ returndatasize()) { _38 := returndatasize() }\n                                finalize_allocation(_35, _38)\n                                expr_6 := abi_decode_bytes4_fromMemory(_35, add(_35, _38))\n                            }\n                            /// @src 17:4942:5117  \"!_isContract(to)...\"\n                            expr_5 := /** @src 17:4978:5117  \"IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data)...\" */ eq(/** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ and(/** @src 17:4978:5117  \"IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data)...\" */ expr_6, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ shl(224, 0xffffffff)), _36)\n                        }\n                        /// @src 17:4921:5159  \"require(...\"\n                        require_helper_stringliteral_91ac(expr_5)\n                        /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                        return(_4, _4)\n                    }\n                    case 0xc87b56dd {\n                        if callvalue() { revert(_4, _4) }\n                        let _39 := 32\n                        if slt(add(calldatasize(), not(3)), _39) { revert(_4, _4) }\n                        let memPos_5 := mload(_2)\n                        mstore(memPos_5, _39)\n                        let length_2 := mload(96)\n                        mstore(add(memPos_5, _39), length_2)\n                        let i_4 := _4\n                        for { } lt(i_4, length_2) { i_4 := add(i_4, _39) }\n                        {\n                            mstore(add(add(memPos_5, i_4), _2), mload(add(128, i_4)))\n                        }\n                        mstore(add(add(memPos_5, length_2), _2), _4)\n                        return(memPos_5, add(sub(add(memPos_5, and(add(length_2, 31), not(31))), memPos_5), _2))\n                    }\n                    case 0xe985e9c5 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                        let value0_4 := abi_decode_address()\n                        let value1_2 := abi_decode_address_8431()\n                        let _40 := sub(shl(160, 1), 1)\n                        mstore(_4, and(value0_4, _40))\n                        mstore(32, /** @src 17:2173:2190  \"_isApprovedForAll\" */ 0x05)\n                        /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                        let _41 := keccak256(_4, _2)\n                        mstore(_4, and(value1_2, _40))\n                        mstore(32, _41)\n                        let value_7 := and(sload(keccak256(_4, _2)), 0xff)\n                        let memPos_6 := mload(_2)\n                        mstore(memPos_6, iszero(iszero(value_7)))\n                        return(memPos_6, 32)\n                    }\n                }\n                revert(0, 0)\n            }\n            function abi_encode_string(value, pos) -> end\n            {\n                let length := mload(value)\n                mstore(pos, length)\n                let i := 0\n                for { } lt(i, length) { i := add(i, 0x20) }\n                {\n                    let _1 := 0x20\n                    mstore(add(add(pos, i), _1), mload(add(add(value, i), _1)))\n                }\n                mstore(add(add(pos, length), 0x20), 0)\n                end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n            }\n            function abi_decode_address() -> value\n            {\n                value := calldataload(4)\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            function abi_decode_address_8431() -> value\n            {\n                value := calldataload(36)\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            function abi_decode_addresst_addresst_uint256(dataEnd) -> value0, value1, value2\n            {\n                if slt(add(dataEnd, not(3)), 96) { revert(0, 0) }\n                let value := calldataload(4)\n                let _1 := sub(shl(160, 1), 1)\n                if iszero(eq(value, and(value, _1)))\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                value0 := value\n                let value_1 := calldataload(36)\n                if iszero(eq(value_1, and(value_1, _1)))\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                value1 := value_1\n                value2 := calldataload(68)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function abi_decode_available_length_string(src, length, end) -> array\n            {\n                if gt(length, 0xffffffffffffffff)\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ 0x24)\n                }\n                let memPtr := mload(64)\n                finalize_allocation(memPtr, add(and(add(length, 31), not(31)), 0x20))\n                array := memPtr\n                mstore(memPtr, length)\n                if gt(add(src, length), end)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                calldatacopy(add(memPtr, 0x20), src, length)\n                mstore(add(add(memPtr, length), 0x20), /** @src -1:-1:-1 */ 0)\n            }\n            /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n            function abi_decode_string(offset, end) -> array\n            {\n                if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n                array := abi_decode_available_length_string(add(offset, 0x20), calldataload(offset), end)\n            }\n            function extract_byte_array_length(data) -> length\n            {\n                length := shr(1, data)\n                let outOfPlaceEncoding := and(data, 1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                if eq(outOfPlaceEncoding, lt(length, 32))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x22)\n                    revert(0, 0x24)\n                }\n            }\n            function require_helper_stringliteral_e7e2(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := mload(64)\n                    mstore(memPtr, shl(229, 4594637))\n                    mstore(add(memPtr, 4), 32)\n                    mstore(add(memPtr, 36), 14)\n                    mstore(add(memPtr, 68), \"NOT_AUTHORIZED\")\n                    revert(memPtr, 100)\n                }\n            }\n            /// @ast-id 29804 @src 17:3632:4325  \"function transferFrom(address from, address to, uint256 id) public payable virtual override {...\"\n            function fun_transferFrom(var_from, var_to, var_id)\n            {\n                /// @src -1:-1:-1\n                let _1 := 0\n                /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                mstore(/** @src -1:-1:-1 */ _1, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ var_id)\n                let _2 := 0x20\n                mstore(_2, /** @src 17:3750:3758  \"_ownerOf\" */ 0x02)\n                /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                let _3 := sub(shl(160, 1), 1)\n                let _4 := 0x40\n                let cleaned := and(sload(keccak256(/** @src -1:-1:-1 */ _1, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ _4)), _3)\n                /// @src 17:3742:3762  \"from == _ownerOf[id]\"\n                let _5 := /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ and(/** @src 17:3742:3762  \"from == _ownerOf[id]\" */ var_from, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ _3)\n                if iszero(/** @src 17:3742:3762  \"from == _ownerOf[id]\" */ eq(_5, cleaned))\n                /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                {\n                    let memPtr := mload(_4)\n                    mstore(memPtr, shl(229, 4594637))\n                    mstore(add(memPtr, 4), _2)\n                    mstore(add(memPtr, 36), 10)\n                    mstore(add(memPtr, 68), \"WRONG_FROM\")\n                    revert(memPtr, 100)\n                }\n                let _6 := and(/** @src 17:3796:3812  \"to != address(0)\" */ var_to, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ _3)\n                if /** @src 17:3796:3812  \"to != address(0)\" */ iszero(/** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ _6)\n                {\n                    let memPtr_1 := mload(_4)\n                    mstore(memPtr_1, shl(229, 4594637))\n                    mstore(add(memPtr_1, 4), _2)\n                    mstore(add(memPtr_1, 36), 17)\n                    mstore(add(memPtr_1, 68), \"INVALID_RECIPIENT\")\n                    revert(memPtr_1, 100)\n                }\n                /// @src 17:3866:3923  \"msg.sender == from || _isApprovedForAll[from][msg.sender]\"\n                let expr := /** @src 17:3866:3884  \"msg.sender == from\" */ eq(/** @src 17:3866:3876  \"msg.sender\" */ caller(), /** @src 17:3866:3884  \"msg.sender == from\" */ _5)\n                /// @src 17:3866:3923  \"msg.sender == from || _isApprovedForAll[from][msg.sender]\"\n                if iszero(expr)\n                {\n                    /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                    mstore(/** @src -1:-1:-1 */ _1, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ _5)\n                    mstore(_2, /** @src 17:3888:3905  \"_isApprovedForAll\" */ 0x05)\n                    /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                    let _7 := keccak256(/** @src -1:-1:-1 */ _1, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ _4)\n                    mstore(/** @src -1:-1:-1 */ _1, /** @src 17:3866:3876  \"msg.sender\" */ caller())\n                    /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                    mstore(_2, _7)\n                    /// @src 17:3866:3923  \"msg.sender == from || _isApprovedForAll[from][msg.sender]\"\n                    expr := /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ and(sload(keccak256(/** @src -1:-1:-1 */ _1, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ _4)), 0xff)\n                }\n                /// @src 17:3866:3957  \"msg.sender == from || _isApprovedForAll[from][msg.sender] || msg.sender == _getApproved[id]\"\n                let expr_1 := expr\n                if iszero(expr)\n                {\n                    /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                    mstore(/** @src -1:-1:-1 */ _1, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ var_id)\n                    mstore(_2, /** @src 17:3941:3953  \"_getApproved\" */ 0x04)\n                    /// @src 17:3866:3957  \"msg.sender == from || _isApprovedForAll[from][msg.sender] || msg.sender == _getApproved[id]\"\n                    expr_1 := /** @src 17:3927:3957  \"msg.sender == _getApproved[id]\" */ eq(/** @src 17:3866:3876  \"msg.sender\" */ caller(), /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ and(sload(keccak256(/** @src -1:-1:-1 */ _1, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ _4)), _3))\n                }\n                /// @src 17:3845:3997  \"require(...\"\n                require_helper_stringliteral_e7e2(expr_1)\n                /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                mstore(/** @src -1:-1:-1 */ _1, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ _5)\n                mstore(_2, /** @src 17:4173:4183  \"_balanceOf\" */ 0x03)\n                /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                let dataSlot := keccak256(/** @src -1:-1:-1 */ _1, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ _4)\n                let _8 := sload(/** @src 17:4173:4191  \"_balanceOf[from]--\" */ dataSlot)\n                /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                if iszero(_8)\n                {\n                    mstore(/** @src -1:-1:-1 */ _1, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(/** @src -1:-1:-1 */ _1, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ 0x24)\n                }\n                let _9 := not(0)\n                sstore(dataSlot, add(_8, _9))\n                mstore(/** @src -1:-1:-1 */ _1, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ _6)\n                mstore(_2, /** @src 17:4173:4183  \"_balanceOf\" */ 0x03)\n                /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                let dataSlot_1 := keccak256(/** @src -1:-1:-1 */ _1, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ _4)\n                let _10 := sload(/** @src 17:4202:4218  \"_balanceOf[to]++\" */ dataSlot_1)\n                /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                if eq(_10, _9)\n                {\n                    mstore(/** @src -1:-1:-1 */ _1, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(/** @src -1:-1:-1 */ _1, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ 0x24)\n                }\n                sstore(dataSlot_1, add(_10, 1))\n                mstore(/** @src -1:-1:-1 */ _1, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ var_id)\n                mstore(_2, /** @src 17:3750:3758  \"_ownerOf\" */ 0x02)\n                /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                let _11 := keccak256(/** @src -1:-1:-1 */ _1, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ _4)\n                let _12 := shl(160, 0xffffffffffffffffffffffff)\n                sstore(_11, or(and(sload(_11), _12), _6))\n                mstore(_2, /** @src 17:4264:4276  \"_getApproved\" */ 0x04)\n                /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                let dataSlot_2 := keccak256(/** @src -1:-1:-1 */ _1, /** @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\" */ _4)\n                sstore(dataSlot_2, and(sload(dataSlot_2), _12))\n                /// @src 17:4296:4318  \"Transfer(from, to, id)\"\n                log4(/** @src -1:-1:-1 */ _1, _1, /** @src 17:4296:4318  \"Transfer(from, to, id)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, _5, _6, var_id)\n            }\n            /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n            function abi_decode_bytes4_fromMemory(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n                let value := mload(headStart)\n                if iszero(eq(value, and(value, shl(224, 0xffffffff))))\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 17:381:7879  \"contract MockERC721 is IERC721Metadata {...\"\n                value0 := value\n            }\n            function require_helper_stringliteral_91ac(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := mload(64)\n                    mstore(memPtr, shl(229, 4594637))\n                    mstore(add(memPtr, 4), 32)\n                    mstore(add(memPtr, 36), 16)\n                    mstore(add(memPtr, 68), \"UNSAFE_RECIPIENT\")\n                    revert(memPtr, 100)\n                }\n            }\n        }\n        data \".metadata\" hex\"a164736f6c6343000813000a\"\n    }\n}\n","hash":"010001f1c70beb0bfe431714e3bf165abedeeecc5a55b46664df69c0ca180e1b","factoryDependencies":{},"id":17}